'''
Steps of KNN algorithm

1. Load the data
2. Initialise the value of k
3. For getting the predicted class, iterate from 1 to total number of training data points
	3.1 Calculate the distance between test data and each row of training data.
      Here we will use Euclidean distance as our distance metric since itâ€™s the most popular method. 
      The other metrics that can be used are Chebyshev, cosine, etc.
	
	3.2 Sort the calculated distances in ascending order based on distance values
	3.3 Get top k rows (neibors) from the sorted array
	3.4 Get the most frequent class of these rows using voting
	3.5 Return the predicted class

'''

############### KNN ALGORITHM implementation using KD TREE ####################

import pandas as pd
import numpy as np
import math
import operator


# loading iris data
data = pd.read_csv('/content/drive/MyDrive/0.CSE-4-1/CSE-4112-ML/iris.csv')
print(data.head()) 


# Determining distance between two data points
def euclideanDistance(data1, data2, length):
    distance = 0
    for x in range(length):
        distance += np.square(data1[x] - data2[x])
    return np.sqrt(distance)


# KNN function, trainingSet = data of csv file, testInstance = testSet
def knn(trainingSet, testInstance, k):
 
    distances = {}
    sort = {}
 
    length = testInstance.shape[1]    # returning column from testInstance, shape[0]=row, shape[1]=column
    
    # Distance between each row of training data and test data
    for x in range(len(trainingSet)):

        # 3.1
        dist = euclideanDistance(testInstance, trainingSet.iloc[x], length)
        distances[x] = dist[0]
        # End of 3.1
 
    #### 3.2, Sorting on the basis of distance
    sorted_d = sorted(distances.items(), key=operator.itemgetter(1))
    #### End of 3.2
 
    neighbors = []
    
    #### 3.3
    # Extracting top k neighbors
    for x in range(k):
        neighbors.append(sorted_d[x][0])
    #### End of 3.3


    classVotes = {}
    
    ####  3.4
    # Calculating the most freq class in the neighbors
    for x in range(len(neighbors)):

        response = trainingSet.iloc[neighbors[x]][-1]
 
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    #### End of 3.4

    #### 3.5
    sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
    return(sortedVotes[0][0], neighbors)
    #### End of 3.5


testSet = [[7.2, 3.6, 5.1, 2.5]]
test = pd.DataFrame(testSet)

k = 3

result,neigh = knn(data, test, k) 
print('\n\nWith', k, ' Nearest Neighbours:\n')

print('\nPredicted class of the datapoint = ', result)

print('\nNearest Neighbours of the datapoints = ', neigh)

