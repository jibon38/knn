
################### KNN using KD Tree   ###########################################

from collections import namedtuple
from operator import itemgetter
from pprint import pformat


### Node Creation Class
class Node(namedtuple("Node", "location left_child right_child")):

    def __repr__(self):
        return pformat(tuple(self))


############ kd  tree implementation  #############################################
def kdtree(points, depth: int = 0):

    if not points:
        return None

    k = len(points[0])  # assumes all points are 2D points i.e k = 2

    # Select axis based on depth so that axis cycles through all valid X,Y values 
    # i.e let X=0, Y=1, depth=0,1,2,3,4,5 and k=2 (2 Dimension), then axis = 0, 1, 0, 1, 0, 1.......

    axis = depth % k

    # Sort point list by axis and choose median as pivot element

    points.sort(key = itemgetter(axis))
    median = len(points) // 2         # quotient i.e floor division for decreasing depth of kdtree

    # Create node and construct subtrees
    return Node(
        location = points[median],
        left_child = kdtree(points[:median], depth + 1),
        right_child = kdtree(points[median + 1 :], depth + 1),
    )



queue_size,k,p,q = 0,0,0,0

# (distance from my query point, the point)
from json.encoder import INFINITY
from queue import PriorityQueue


priorityQ = PriorityQueue()


# euclidean distance
import math
def Edistance(p,q, x,y):
    return math.sqrt((p-x)**2+(q-y)**2)



# find the k-nearest neighbors
def KNN(subtree, depth):

    global queue_size,k
    if(subtree == None):
        return

    nextBranch = Node(location=None, left_child=None, right_child=None)
    otherBranch = Node(location=None, left_child=None, right_child=None)

    # decide which subtree to visit first
    x,y = subtree.location

    if(depth == 0):
        # x-axis
        if(p<x):
            nextBranch = subtree.left_child
            otherBranch = subtree.right_child
        else:
            nextBranch = subtree.right_child
            otherBranch = subtree.left_child
    else:
        # y-axis
        if(q<y):
            nextBranch = subtree.left_child
            otherBranch = subtree.right_child
        else:
            nextBranch = subtree.right_child
            otherBranch = subtree.left_child
    


    KNN(nextBranch, depth+1)

    # find the distance between the query point and the current subtree root
    distance = Edistance(p,q,subtree.location[0], subtree.location[1])

    
    if(queue_size < k):

        priorityQ.put((-1*distance, subtree))
        queue_size += 1
        
    else:
        top = priorityQ.get()
        if(top[0]*-1 < distance):
            priorityQ.put(top)
        else:
            priorityQ.put((-distance, subtree))

    
    # check if the other subtree has any points
    worstbest = priorityQ.get()
    priorityQ.put(worstbest)

    radius = Edistance(p,q,subtree.location[0], subtree.location[1])
    
    dist = INFINITY
    if depth==0:
        dist = abs(p-x)
    else:
        dist = abs(q-y)

    if(radius >= dist):
        KNN(otherBranch, depth+1)
    
    return
    



def main():    

    point_list = [(7, 2), (5, 4), (9, 6), (4, 7), (8, 1), (2, 3)]

    tree = kdtree(point_list, 0)    # initially, depth = 0
    
    global p,q,k

    p = 9   # x=p, y=q i.e target point to find its k nearest neighbors
    q = 4
    
    k = 2

    ### Implementation of KNN algorithm, calling KNN() function
    KNN(tree, 0)

    print("distance", " co-ordinates")
    
    while not priorityQ.empty():

        x = priorityQ.get()
        print(format(x[0]*-1,".2f"), "   -> ", x[1].location)


if __name__ == "__main__":

    main()    # calling the main function


